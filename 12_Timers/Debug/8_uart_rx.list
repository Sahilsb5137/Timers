
8_uart_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000458  08000460  00010460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000458  08000458  00010460  2**0
                  CONTENTS
  4 .ARM          00000000  08000458  08000458  00010460  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000458  08000460  00010460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000458  08000458  00010458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800045c  0800045c  0001045c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000460  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000460  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010460  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000868  00000000  00000000  00010490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000262  00000000  00000000  00010cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000098  00000000  00000000  00010f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00010ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eba3  00000000  00000000  00011068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000d04  00000000  00000000  0001fc0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00053bd0  00000000  00000000  0002090f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000744df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000158  00000000  00000000  00074530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000440 	.word	0x08000440

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	08000440 	.word	0x08000440

080001d8 <main>:


char key;

int main(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	//1. Enable Clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80001dc:	4b15      	ldr	r3, [pc, #84]	; (8000234 <main+0x5c>)
 80001de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001e0:	4a14      	ldr	r2, [pc, #80]	; (8000234 <main+0x5c>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6313      	str	r3, [r2, #48]	; 0x30

	//2. Set PA5 as output pin
	GPIOA->MODER &=~ (1U<<11);
 80001e8:	4b13      	ldr	r3, [pc, #76]	; (8000238 <main+0x60>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a12      	ldr	r2, [pc, #72]	; (8000238 <main+0x60>)
 80001ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80001f2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<10);
 80001f4:	4b10      	ldr	r3, [pc, #64]	; (8000238 <main+0x60>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a0f      	ldr	r2, [pc, #60]	; (8000238 <main+0x60>)
 80001fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80001fe:	6013      	str	r3, [r2, #0]


	uart2_rxtx_init();
 8000200:	f000 f81e 	bl	8000240 <uart2_rxtx_init>

	while(1)
	{
		key = UART2_readChar();
 8000204:	f000 f8ba 	bl	800037c <UART2_readChar>
 8000208:	4603      	mov	r3, r0
 800020a:	461a      	mov	r2, r3
 800020c:	4b0b      	ldr	r3, [pc, #44]	; (800023c <main+0x64>)
 800020e:	701a      	strb	r2, [r3, #0]
		if(key == '1')
 8000210:	4b0a      	ldr	r3, [pc, #40]	; (800023c <main+0x64>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	2b31      	cmp	r3, #49	; 0x31
 8000216:	d106      	bne.n	8000226 <main+0x4e>
		{
			GPIOA->ODR |= LED_PIN;
 8000218:	4b07      	ldr	r3, [pc, #28]	; (8000238 <main+0x60>)
 800021a:	695b      	ldr	r3, [r3, #20]
 800021c:	4a06      	ldr	r2, [pc, #24]	; (8000238 <main+0x60>)
 800021e:	f043 0320 	orr.w	r3, r3, #32
 8000222:	6153      	str	r3, [r2, #20]
 8000224:	e7ee      	b.n	8000204 <main+0x2c>
		}
		else
		{
			GPIOA->ODR &= ~LED_PIN;
 8000226:	4b04      	ldr	r3, [pc, #16]	; (8000238 <main+0x60>)
 8000228:	695b      	ldr	r3, [r3, #20]
 800022a:	4a03      	ldr	r2, [pc, #12]	; (8000238 <main+0x60>)
 800022c:	f023 0320 	bic.w	r3, r3, #32
 8000230:	6153      	str	r3, [r2, #20]
		key = UART2_readChar();
 8000232:	e7e7      	b.n	8000204 <main+0x2c>
 8000234:	40023800 	.word	0x40023800
 8000238:	40020000 	.word	0x40020000
 800023c:	2000001c 	.word	0x2000001c

08000240 <uart2_rxtx_init>:
	return ch;
}


void uart2_rxtx_init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	//************Configure UART GPIO Pins************
	//1. Enable Clock Access to GPIOA
	RCC-> AHB1ENR |= GPIOAEN;
 8000244:	4b36      	ldr	r3, [pc, #216]	; (8000320 <uart2_rxtx_init+0xe0>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000248:	4a35      	ldr	r2, [pc, #212]	; (8000320 <uart2_rxtx_init+0xe0>)
 800024a:	f043 0301 	orr.w	r3, r3, #1
 800024e:	6313      	str	r3, [r2, #48]	; 0x30

	//2. Set PA2 mode to Alternate Function Mode
	GPIOA-> MODER &=~(1U<<4);
 8000250:	4b34      	ldr	r3, [pc, #208]	; (8000324 <uart2_rxtx_init+0xe4>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a33      	ldr	r2, [pc, #204]	; (8000324 <uart2_rxtx_init+0xe4>)
 8000256:	f023 0310 	bic.w	r3, r3, #16
 800025a:	6013      	str	r3, [r2, #0]
	GPIOA -> MODER |= (1U<<5);
 800025c:	4b31      	ldr	r3, [pc, #196]	; (8000324 <uart2_rxtx_init+0xe4>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a30      	ldr	r2, [pc, #192]	; (8000324 <uart2_rxtx_init+0xe4>)
 8000262:	f043 0320 	orr.w	r3, r3, #32
 8000266:	6013      	str	r3, [r2, #0]

	//3.Set PA2 Alternate Function Type to UART_Tx (AF7). AFRL -> [0]
	GPIOA-> AFR[0] |= (1<<8);
 8000268:	4b2e      	ldr	r3, [pc, #184]	; (8000324 <uart2_rxtx_init+0xe4>)
 800026a:	6a1b      	ldr	r3, [r3, #32]
 800026c:	4a2d      	ldr	r2, [pc, #180]	; (8000324 <uart2_rxtx_init+0xe4>)
 800026e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000272:	6213      	str	r3, [r2, #32]
	GPIOA-> AFR[0] |= (1<<9);
 8000274:	4b2b      	ldr	r3, [pc, #172]	; (8000324 <uart2_rxtx_init+0xe4>)
 8000276:	6a1b      	ldr	r3, [r3, #32]
 8000278:	4a2a      	ldr	r2, [pc, #168]	; (8000324 <uart2_rxtx_init+0xe4>)
 800027a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800027e:	6213      	str	r3, [r2, #32]
	GPIOA-> AFR[0] |= (1<<10);
 8000280:	4b28      	ldr	r3, [pc, #160]	; (8000324 <uart2_rxtx_init+0xe4>)
 8000282:	6a1b      	ldr	r3, [r3, #32]
 8000284:	4a27      	ldr	r2, [pc, #156]	; (8000324 <uart2_rxtx_init+0xe4>)
 8000286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800028a:	6213      	str	r3, [r2, #32]
	GPIOA-> AFR[0] &=~ (1<<11);
 800028c:	4b25      	ldr	r3, [pc, #148]	; (8000324 <uart2_rxtx_init+0xe4>)
 800028e:	6a1b      	ldr	r3, [r3, #32]
 8000290:	4a24      	ldr	r2, [pc, #144]	; (8000324 <uart2_rxtx_init+0xe4>)
 8000292:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000296:	6213      	str	r3, [r2, #32]

	//************Configure UART Module************
	//1. Clock Access to UART
	RCC-> APB1ENR |= USART2EN;
 8000298:	4b21      	ldr	r3, [pc, #132]	; (8000320 <uart2_rxtx_init+0xe0>)
 800029a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800029c:	4a20      	ldr	r2, [pc, #128]	; (8000320 <uart2_rxtx_init+0xe0>)
 800029e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002a2:	6413      	str	r3, [r2, #64]	; 0x40

	//2. Configure the BaudRate
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 80002a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a8:	491f      	ldr	r1, [pc, #124]	; (8000328 <uart2_rxtx_init+0xe8>)
 80002aa:	4820      	ldr	r0, [pc, #128]	; (800032c <uart2_rxtx_init+0xec>)
 80002ac:	f000 f840 	bl	8000330 <uart_set_baudrate>

	//3.Configure Transfer Direction
	USART2->CR1 = CR1_TE;
 80002b0:	4b1e      	ldr	r3, [pc, #120]	; (800032c <uart2_rxtx_init+0xec>)
 80002b2:	2208      	movs	r2, #8
 80002b4:	60da      	str	r2, [r3, #12]

	//4.Enable UART Module
	USART2->CR1 |= CR1_UE;
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <uart2_rxtx_init+0xec>)
 80002b8:	68db      	ldr	r3, [r3, #12]
 80002ba:	4a1c      	ldr	r2, [pc, #112]	; (800032c <uart2_rxtx_init+0xec>)
 80002bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002c0:	60d3      	str	r3, [r2, #12]


//******************* UART Receiver Driver *******************

	//1. Set PA3 mode to Alternate Function Mode (USART2 Rx)
	GPIOA->MODER &=~ (1U<<6);
 80002c2:	4b18      	ldr	r3, [pc, #96]	; (8000324 <uart2_rxtx_init+0xe4>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	4a17      	ldr	r2, [pc, #92]	; (8000324 <uart2_rxtx_init+0xe4>)
 80002c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80002cc:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=	 (1U<<7);
 80002ce:	4b15      	ldr	r3, [pc, #84]	; (8000324 <uart2_rxtx_init+0xe4>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a14      	ldr	r2, [pc, #80]	; (8000324 <uart2_rxtx_init+0xe4>)
 80002d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002d8:	6013      	str	r3, [r2, #0]

	//2.Set PA3 Alternate Function Type to UART_Rx (AF7). AFRL -> [0]
	GPIOA->AFR[0] |= (1U<<12);
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <uart2_rxtx_init+0xe4>)
 80002dc:	6a1b      	ldr	r3, [r3, #32]
 80002de:	4a11      	ldr	r2, [pc, #68]	; (8000324 <uart2_rxtx_init+0xe4>)
 80002e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002e4:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<13);
 80002e6:	4b0f      	ldr	r3, [pc, #60]	; (8000324 <uart2_rxtx_init+0xe4>)
 80002e8:	6a1b      	ldr	r3, [r3, #32]
 80002ea:	4a0e      	ldr	r2, [pc, #56]	; (8000324 <uart2_rxtx_init+0xe4>)
 80002ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80002f0:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<14);
 80002f2:	4b0c      	ldr	r3, [pc, #48]	; (8000324 <uart2_rxtx_init+0xe4>)
 80002f4:	6a1b      	ldr	r3, [r3, #32]
 80002f6:	4a0b      	ldr	r2, [pc, #44]	; (8000324 <uart2_rxtx_init+0xe4>)
 80002f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80002fc:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~ (1U<<15);
 80002fe:	4b09      	ldr	r3, [pc, #36]	; (8000324 <uart2_rxtx_init+0xe4>)
 8000300:	6a1b      	ldr	r3, [r3, #32]
 8000302:	4a08      	ldr	r2, [pc, #32]	; (8000324 <uart2_rxtx_init+0xe4>)
 8000304:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000308:	6213      	str	r3, [r2, #32]

	//3.Configure Transfer Direction
	USART2->CR1 = (CR1_TE | CR1_RE);
 800030a:	4b08      	ldr	r3, [pc, #32]	; (800032c <uart2_rxtx_init+0xec>)
 800030c:	220c      	movs	r2, #12
 800030e:	60da      	str	r2, [r3, #12]

	//4.Enable UART Module
	USART2->CR1 |= CR1_UE;
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <uart2_rxtx_init+0xec>)
 8000312:	68db      	ldr	r3, [r3, #12]
 8000314:	4a05      	ldr	r2, [pc, #20]	; (800032c <uart2_rxtx_init+0xec>)
 8000316:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800031a:	60d3      	str	r3, [r2, #12]

}
 800031c:	bf00      	nop
 800031e:	bd80      	pop	{r7, pc}
 8000320:	40023800 	.word	0x40023800
 8000324:	40020000 	.word	0x40020000
 8000328:	00f42400 	.word	0x00f42400
 800032c:	40004400 	.word	0x40004400

08000330 <uart_set_baudrate>:
}



static void uart_set_baudrate(USART_TypeDef *USARTx,uint32_t PeriphClk,uint32_t BaudRate)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	b084      	sub	sp, #16
 8000334:	af00      	add	r7, sp, #0
 8000336:	60f8      	str	r0, [r7, #12]
 8000338:	60b9      	str	r1, [r7, #8]
 800033a:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 800033c:	6879      	ldr	r1, [r7, #4]
 800033e:	68b8      	ldr	r0, [r7, #8]
 8000340:	f000 f808 	bl	8000354 <compute_uart_bd>
 8000344:	4603      	mov	r3, r0
 8000346:	461a      	mov	r2, r3
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	609a      	str	r2, [r3, #8]
}
 800034c:	bf00      	nop
 800034e:	3710      	adds	r7, #16
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}

08000354 <compute_uart_bd>:


static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
 800035c:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + BaudRate/2U)/BaudRate);
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	085a      	lsrs	r2, r3, #1
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	441a      	add	r2, r3
 8000366:	683b      	ldr	r3, [r7, #0]
 8000368:	fbb2 f3f3 	udiv	r3, r2, r3
 800036c:	b29b      	uxth	r3, r3

}
 800036e:	4618      	mov	r0, r3
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000378:	4770      	bx	lr
	...

0800037c <UART2_readChar>:

char UART2_readChar(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
	//1. Make sure the Receive Data Register is Empty
	while (!(USART2->SR & SR_RXNE)){}
 8000380:	bf00      	nop
 8000382:	4b07      	ldr	r3, [pc, #28]	; (80003a0 <UART2_readChar+0x24>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	f003 0320 	and.w	r3, r3, #32
 800038a:	2b00      	cmp	r3, #0
 800038c:	d0f9      	beq.n	8000382 <UART2_readChar+0x6>

	//2. Read data
	return USART2->DR;
 800038e:	4b04      	ldr	r3, [pc, #16]	; (80003a0 <UART2_readChar+0x24>)
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	b2db      	uxtb	r3, r3


}
 8000394:	4618      	mov	r0, r3
 8000396:	46bd      	mov	sp, r7
 8000398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop
 80003a0:	40004400 	.word	0x40004400

080003a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003a4:	480d      	ldr	r0, [pc, #52]	; (80003dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003ac:	480c      	ldr	r0, [pc, #48]	; (80003e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80003ae:	490d      	ldr	r1, [pc, #52]	; (80003e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003b0:	4a0d      	ldr	r2, [pc, #52]	; (80003e8 <LoopForever+0xe>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003b4:	e002      	b.n	80003bc <LoopCopyDataInit>

080003b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ba:	3304      	adds	r3, #4

080003bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003c0:	d3f9      	bcc.n	80003b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003c2:	4a0a      	ldr	r2, [pc, #40]	; (80003ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80003c4:	4c0a      	ldr	r4, [pc, #40]	; (80003f0 <LoopForever+0x16>)
  movs r3, #0
 80003c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003c8:	e001      	b.n	80003ce <LoopFillZerobss>

080003ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003cc:	3204      	adds	r2, #4

080003ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003d0:	d3fb      	bcc.n	80003ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003d2:	f000 f811 	bl	80003f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003d6:	f7ff feff 	bl	80001d8 <main>

080003da <LoopForever>:

LoopForever:
  b LoopForever
 80003da:	e7fe      	b.n	80003da <LoopForever>
  ldr   r0, =_estack
 80003dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003e4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003e8:	08000460 	.word	0x08000460
  ldr r2, =_sbss
 80003ec:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003f0:	20000020 	.word	0x20000020

080003f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003f4:	e7fe      	b.n	80003f4 <ADC_IRQHandler>
	...

080003f8 <__libc_init_array>:
 80003f8:	b570      	push	{r4, r5, r6, lr}
 80003fa:	4d0d      	ldr	r5, [pc, #52]	; (8000430 <__libc_init_array+0x38>)
 80003fc:	4c0d      	ldr	r4, [pc, #52]	; (8000434 <__libc_init_array+0x3c>)
 80003fe:	1b64      	subs	r4, r4, r5
 8000400:	10a4      	asrs	r4, r4, #2
 8000402:	2600      	movs	r6, #0
 8000404:	42a6      	cmp	r6, r4
 8000406:	d109      	bne.n	800041c <__libc_init_array+0x24>
 8000408:	4d0b      	ldr	r5, [pc, #44]	; (8000438 <__libc_init_array+0x40>)
 800040a:	4c0c      	ldr	r4, [pc, #48]	; (800043c <__libc_init_array+0x44>)
 800040c:	f000 f818 	bl	8000440 <_init>
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	10a4      	asrs	r4, r4, #2
 8000414:	2600      	movs	r6, #0
 8000416:	42a6      	cmp	r6, r4
 8000418:	d105      	bne.n	8000426 <__libc_init_array+0x2e>
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000420:	4798      	blx	r3
 8000422:	3601      	adds	r6, #1
 8000424:	e7ee      	b.n	8000404 <__libc_init_array+0xc>
 8000426:	f855 3b04 	ldr.w	r3, [r5], #4
 800042a:	4798      	blx	r3
 800042c:	3601      	adds	r6, #1
 800042e:	e7f2      	b.n	8000416 <__libc_init_array+0x1e>
 8000430:	08000458 	.word	0x08000458
 8000434:	08000458 	.word	0x08000458
 8000438:	08000458 	.word	0x08000458
 800043c:	0800045c 	.word	0x0800045c

08000440 <_init>:
 8000440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000442:	bf00      	nop
 8000444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000446:	bc08      	pop	{r3}
 8000448:	469e      	mov	lr, r3
 800044a:	4770      	bx	lr

0800044c <_fini>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr
